// <auto-generated />
using System;
using AssetManagementApp.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AssetManagementApp.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "7.0.14");

            modelBuilder.Entity("AssetManagementApp.Data.Models.Asset", b =>
                {
                    b.Property<int>("AssetId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("AssetName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("AssetType")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Condition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsSpare")
                        .HasColumnType("INTEGER");

                    b.Property<string>("MakeModel")
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("PurchaseDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("SerialNumber")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("Specifications")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("WarrantyExpiryDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AssetId");

                    b.HasIndex("SerialNumber")
                        .IsUnique();

                    b.ToTable("Assets");

                    b.HasData(
                        new
                        {
                            AssetId = 1,
                            AssetName = "Dell Laptop XPS 15",
                            AssetType = "Laptop",
                            Condition = "Good",
                            IsSpare = false,
                            MakeModel = "Dell XPS 15 9520",
                            PurchaseDate = new DateTime(2024, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5030),
                            SerialNumber = "DL-XPS-001",
                            Specifications = "Intel i7, 16GB RAM, 512GB SSD",
                            Status = "Available",
                            WarrantyExpiryDate = new DateTime(2027, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5040)
                        },
                        new
                        {
                            AssetId = 2,
                            AssetName = "HP Laptop ProBook",
                            AssetType = "Laptop",
                            Condition = "Good",
                            IsSpare = false,
                            MakeModel = "HP ProBook 450 G9",
                            PurchaseDate = new DateTime(2023, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5050),
                            SerialNumber = "HP-PRO-002",
                            Specifications = "Intel i5, 8GB RAM, 256GB SSD",
                            Status = "Available",
                            WarrantyExpiryDate = new DateTime(2026, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5050)
                        },
                        new
                        {
                            AssetId = 3,
                            AssetName = "Samsung Monitor 27\"",
                            AssetType = "Monitor",
                            Condition = "Good",
                            IsSpare = false,
                            MakeModel = "Samsung 27\" LED",
                            PurchaseDate = new DateTime(2024, 4, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5060),
                            SerialNumber = "SM-MON-003",
                            Specifications = "27 inch, 1920x1080, IPS Panel",
                            Status = "Available",
                            WarrantyExpiryDate = new DateTime(2026, 4, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5060)
                        },
                        new
                        {
                            AssetId = 4,
                            AssetName = "LG Monitor 24\"",
                            AssetType = "Monitor",
                            Condition = "Good",
                            IsSpare = true,
                            MakeModel = "LG 24\" LED",
                            PurchaseDate = new DateTime(2024, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5060),
                            SerialNumber = "LG-MON-004",
                            Specifications = "24 inch, 1920x1080",
                            Status = "Available",
                            WarrantyExpiryDate = new DateTime(2027, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5070)
                        },
                        new
                        {
                            AssetId = 5,
                            AssetName = "Logitech Keyboard",
                            AssetType = "Keyboard",
                            Condition = "New",
                            IsSpare = false,
                            MakeModel = "Logitech K380",
                            PurchaseDate = new DateTime(2025, 4, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5070),
                            SerialNumber = "LG-KB-005",
                            Specifications = "Wireless, Bluetooth",
                            Status = "Available",
                            WarrantyExpiryDate = new DateTime(2026, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5070)
                        },
                        new
                        {
                            AssetId = 6,
                            AssetName = "Logitech Mouse",
                            AssetType = "Mouse",
                            Condition = "Good",
                            IsSpare = true,
                            MakeModel = "Logitech MX Master 3",
                            PurchaseDate = new DateTime(2025, 2, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5080),
                            SerialNumber = "LG-MS-006",
                            Specifications = "Wireless, Ergonomic",
                            Status = "Available",
                            WarrantyExpiryDate = new DateTime(2027, 2, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5080)
                        },
                        new
                        {
                            AssetId = 7,
                            AssetName = "iPhone 13",
                            AssetType = "Mobile Phone",
                            Condition = "Good",
                            IsSpare = false,
                            MakeModel = "Apple iPhone 13",
                            PurchaseDate = new DateTime(2024, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5080),
                            SerialNumber = "APL-IP-007",
                            Specifications = "128GB, Blue",
                            Status = "Available",
                            WarrantyExpiryDate = new DateTime(2025, 11, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5080)
                        },
                        new
                        {
                            AssetId = 8,
                            AssetName = "MacBook Pro 14",
                            AssetType = "Laptop",
                            Condition = "New",
                            IsSpare = false,
                            MakeModel = "Apple MacBook Pro 14",
                            PurchaseDate = new DateTime(2025, 7, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5090),
                            SerialNumber = "APL-MBP-008",
                            Specifications = "M2 Pro, 16GB RAM, 512GB SSD",
                            Status = "Under Repair",
                            WarrantyExpiryDate = new DateTime(2028, 7, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5090)
                        },
                        new
                        {
                            AssetId = 9,
                            AssetName = "Dell Monitor 32\"",
                            AssetType = "Monitor",
                            Condition = "Needs Repair",
                            IsSpare = false,
                            MakeModel = "Dell UltraSharp 32",
                            PurchaseDate = new DateTime(2022, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5090),
                            SerialNumber = "DL-MON-009",
                            Specifications = "32 inch, 4K",
                            Status = "Retired",
                            WarrantyExpiryDate = new DateTime(2025, 4, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5090)
                        },
                        new
                        {
                            AssetId = 10,
                            AssetName = "HP Laptop EliteBook",
                            AssetType = "Laptop",
                            Condition = "Good",
                            IsSpare = false,
                            MakeModel = "HP EliteBook 840 G8",
                            PurchaseDate = new DateTime(2024, 12, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5100),
                            SerialNumber = "HP-ELT-010",
                            Specifications = "Intel i7, 16GB RAM, 512GB SSD",
                            Status = "Available",
                            WarrantyExpiryDate = new DateTime(2027, 10, 2, 2, 59, 10, 769, DateTimeKind.Local).AddTicks(5100)
                        });
                });

            modelBuilder.Entity("AssetManagementApp.Data.Models.AssetAssignment", b =>
                {
                    b.Property<int>("AssignmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("AssetId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("AssignedDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasMaxLength(500)
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ReturnedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("AssignmentId");

                    b.HasIndex("AssetId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AssetAssignments");
                });

            modelBuilder.Entity("AssetManagementApp.Data.Models.Employee", b =>
                {
                    b.Property<int>("EmployeeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Department")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Designation")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("TEXT");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("TEXT");

                    b.Property<bool>("IsActive")
                        .HasColumnType("INTEGER");

                    b.Property<string>("PhoneNumber")
                        .HasMaxLength(15)
                        .HasColumnType("TEXT");

                    b.HasKey("EmployeeId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            EmployeeId = 1,
                            Department = "IT",
                            Designation = "Senior Developer",
                            Email = "john.doe@company.com",
                            FullName = "John Doe",
                            IsActive = true,
                            PhoneNumber = "1234567890"
                        },
                        new
                        {
                            EmployeeId = 2,
                            Department = "HR",
                            Designation = "HR Manager",
                            Email = "jane.smith@company.com",
                            FullName = "Jane Smith",
                            IsActive = true,
                            PhoneNumber = "0987654321"
                        },
                        new
                        {
                            EmployeeId = 3,
                            Department = "IT",
                            Designation = "Junior Developer",
                            Email = "mike.johnson@company.com",
                            FullName = "Mike Johnson",
                            IsActive = true,
                            PhoneNumber = "5551234567"
                        },
                        new
                        {
                            EmployeeId = 4,
                            Department = "Finance",
                            Designation = "Accountant",
                            Email = "sarah.williams@company.com",
                            FullName = "Sarah Williams",
                            IsActive = true,
                            PhoneNumber = "5559876543"
                        },
                        new
                        {
                            EmployeeId = 5,
                            Department = "IT",
                            Designation = "DevOps Engineer",
                            Email = "david.brown@company.com",
                            FullName = "David Brown",
                            IsActive = false,
                            PhoneNumber = "5556781234"
                        });
                });

            modelBuilder.Entity("AssetManagementApp.Data.Models.AssetAssignment", b =>
                {
                    b.HasOne("AssetManagementApp.Data.Models.Asset", "Asset")
                        .WithMany("AssetAssignments")
                        .HasForeignKey("AssetId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("AssetManagementApp.Data.Models.Employee", "Employee")
                        .WithMany("AssetAssignments")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Asset");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("AssetManagementApp.Data.Models.Asset", b =>
                {
                    b.Navigation("AssetAssignments");
                });

            modelBuilder.Entity("AssetManagementApp.Data.Models.Employee", b =>
                {
                    b.Navigation("AssetAssignments");
                });
#pragma warning restore 612, 618
        }
    }
}
