@page "/assets"
@using AssetManagementApp.Services
@inject ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Asset Management</PageTitle>

<div class="container-fluid mt-4">
    <div class="row mb-3">
        <div class="col-md-6">
            <h3>Asset Inventory</h3>
        </div>
        <div class="col-md-6 text-end">
            <button class="btn btn-primary" @onclick="NavigateToAdd">
                <i class="bi bi-plus-circle"></i> Add New Asset
            </button>
        </div>
    </div>

    <!-- Filters Row -->
    <div class="row mb-3">
        <div class="col-md-4">
            <div class="input-group">
                <span class="input-group-text">
                    <i class="bi bi-search"></i>
                </span>
                <input type="text" 
                       class="form-control" 
                       placeholder="Search by name, serial number, or model..." 
                       @bind="searchTerm"
                       @bind:event="oninput"
                       @onkeyup="HandleSearch" />
            </div>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filterType" @bind:after="HandleFilterChange">
                <option value="">All Types</option>
                @foreach (var type in assetTypes)
                {
                    <option value="@type">@type</option>
                }
            </select>
        </div>
        <div class="col-md-3">
            <select class="form-select" @bind="filterStatus" @bind:after="HandleFilterChange">
                <option value="">All Statuses</option>
                <option value="Available">Available</option>
                <option value="Assigned">Assigned</option>
                <option value="Under Repair">Under Repair</option>
                <option value="Retired">Retired</option>
            </select>
        </div>
        <div class="col-md-2">
            <button class="btn btn-outline-secondary w-100" @onclick="ClearFilters">
                <i class="bi bi-x-circle"></i> Clear Filters
            </button>
        </div>
    </div>

    <!-- Success/Error Messages -->
    @if (!string.IsNullOrEmpty(successMessage))
    {
        <div class="alert alert-success alert-dismissible fade show">
            <i class="bi bi-check-circle"></i> @successMessage
            <button type="button" class="btn-close" @onclick="@(() => successMessage = null)"></button>
        </div>
    }

    @if (!string.IsNullOrEmpty(errorMessage))
    {
        <div class="alert alert-danger alert-dismissible fade show">
            <i class="bi bi-exclamation-triangle"></i> @errorMessage
            <button type="button" class="btn-close" @onclick="@(() => errorMessage = null)"></button>
        </div>
    }

    <!-- Asset Table -->
    @if (assets == null)
    {
        <div class="text-center">
            <div class="spinner-border text-primary" role="status">
                <span class="visually-hidden">Loading...</span>
            </div>
            <p class="mt-2">Loading assets...</p>
        </div>
    }
    else if (!assets.Any())
    {
        <div class="alert alert-info">
            <i class="bi bi-info-circle"></i> No assets found.
        </div>
    }
    else
    {
        <div class="table-responsive">
            <table class="table table-hover table-striped">
                <thead class="table-dark">
                    <tr>
                        <th>ID</th>
                        <th>Asset Name</th>
                        <th>Type</th>
                        <th>Serial Number</th>
                        <th>Make/Model</th>
                        <th>Condition</th>
                        <th>Status</th>
                        <th>Spare</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var asset in assets)
                    {
                        <tr>
                            <td>@asset.AssetId</td>
                            <td><strong>@asset.AssetName</strong></td>
                            <td>
                                <span class="badge bg-info">@asset.AssetType</span>
                            </td>
                            <td>
                                <code>@asset.SerialNumber</code>
                            </td>
                            <td>@(asset.MakeModel ?? "N/A")</td>
                            <td>
                                @switch (asset.Condition)
                                {
                                    case "New":
                                        <span class="badge bg-success">@asset.Condition</span>
                                        break;
                                    case "Good":
                                        <span class="badge bg-primary">@asset.Condition</span>
                                        break;
                                    case "Needs Repair":
                                        <span class="badge bg-warning text-dark">@asset.Condition</span>
                                        break;
                                    case "Damaged":
                                        <span class="badge bg-danger">@asset.Condition</span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary">@asset.Condition</span>
                                        break;
                                }
                            </td>
                            <td>
                                @switch (asset.Status)
                                {
                                    case "Available":
                                        <span class="badge bg-success">
                                            <i class="bi bi-check-circle"></i> @asset.Status
                                        </span>
                                        break;
                                    case "Assigned":
                                        <span class="badge bg-primary">
                                            <i class="bi bi-person-fill"></i> @asset.Status
                                        </span>
                                        break;
                                    case "Under Repair":
                                        <span class="badge bg-warning text-dark">
                                            <i class="bi bi-tools"></i> @asset.Status
                                        </span>
                                        break;
                                    case "Retired":
                                        <span class="badge bg-secondary">
                                            <i class="bi bi-archive"></i> @asset.Status
                                        </span>
                                        break;
                                    default:
                                        <span class="badge bg-secondary">@asset.Status</span>
                                        break;
                                }
                            </td>
                            <td>
                                @if (asset.IsSpare)
                                {
                                    <span class="badge bg-info">
                                        <i class="bi bi-box"></i> Spare
                                    </span>
                                }
                            </td>
                            <td>
                                <button class="btn btn-sm btn-outline-primary me-1" 
                                        @onclick="@(() => NavigateToEdit(asset.AssetId))"
                                        title="Edit">
                                    <i class="bi bi-pencil"></i> Edit
                                </button>
                                <button class="btn btn-sm btn-outline-danger" 
                                        @onclick="@(() => ShowDeleteConfirmation(asset))"
                                        title="Delete">
                                    <i class="bi bi-trash"></i> Delete
                                </button>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <!-- Summary Statistics -->
        <div class="row mt-3">
            <div class="col-md-12">
                <div class="card">
                    <div class="card-body">
                        <h6 class="card-title">Asset Summary</h6>
                        <div class="row text-center">
                            <div class="col">
                                <h4>@assets.Count</h4>
                                <small class="text-muted">Total Assets</small>
                            </div>
                            <div class="col">
                                <h4 class="text-success">@assets.Count(a => a.Status == "Available")</h4>
                                <small class="text-muted">Available</small>
                            </div>
                            <div class="col">
                                <h4 class="text-primary">@assets.Count(a => a.Status == "Assigned")</h4>
                                <small class="text-muted">Assigned</small>
                            </div>
                            <div class="col">
                                <h4 class="text-warning">@assets.Count(a => a.Status == "Under Repair")</h4>
                                <small class="text-muted">Under Repair</small>
                            </div>
                            <div class="col">
                                <h4 class="text-secondary">@assets.Count(a => a.Status == "Retired")</h4>
                                <small class="text-muted">Retired</small>
                            </div>
                            <div class="col">
                                <h4 class="text-info">@assets.Count(a => a.IsSpare)</h4>
                                <small class="text-muted">Spare Assets</small>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    }
</div>

<!-- Delete Confirmation Modal -->
@if (showDeleteModal && assetToDelete != null)
{
    <div class="modal d-block" style="background-color: rgba(0,0,0,0.5);">
        <div class="modal-dialog">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title">Confirm Delete</h5>
                    <button type="button" class="btn-close" @onclick="CancelDelete"></button>
                </div>
                <div class="modal-body">
                    <p>Are you sure you want to delete asset <strong>@assetToDelete.AssetName</strong>?</p>
                    <p><small class="text-muted">Serial Number: @assetToDelete.SerialNumber</small></p>
                    @if (deleteWarning != null)
                    {
                        <div class="alert alert-warning">
                            <i class="bi bi-exclamation-triangle"></i> @deleteWarning
                        </div>
                    }
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn btn-secondary" @onclick="CancelDelete">Cancel</button>
                    <button type="button" class="btn btn-danger" @onclick="ConfirmDelete" disabled="@isDeleting">
                        @if (isDeleting)
                        {
                            <span class="spinner-border spinner-border-sm me-2"></span>
                        }
                        Delete
                    </button>
                </div>
            </div>
        </div>
    </div>
}

@code {
    [Inject] private IAssetService AssetService { get; set; } = default!;
    [Inject] private NavigationManager Navigation { get; set; } = default!;

    private List<Asset>? assets;
    private List<Asset>? allAssets; // Store unfiltered list
    private List<string> assetTypes = new();
    private string? searchTerm;
    private string? filterType;
    private string? filterStatus;
    private string? successMessage;
    private string? errorMessage;
    
    // Delete confirmation
    private bool showDeleteModal = false;
    private Asset? assetToDelete;
    private string? deleteWarning;
    private bool isDeleting = false;

    protected override async Task OnInitializedAsync()
    {
        await LoadAssets();
        await LoadAssetTypes();
    }

    private async Task LoadAssets()
    {
        try
        {
            allAssets = await AssetService.GetAllAssetsAsync();
            ApplyFilters();
        }
        catch (Exception ex)
        {
            errorMessage = $"Error loading assets: {ex.Message}";
        }
    }

    private async Task LoadAssetTypes()
    {
        try
        {
            assetTypes = await AssetService.GetAssetTypesAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading asset types: {ex.Message}");
        }
    }

    private void ApplyFilters()
    {
        if (allAssets == null)
        {
            assets = new List<Asset>();
            return;
        }

        assets = allAssets;

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchTerm))
        {
            var search = searchTerm.ToLower();
            assets = assets.Where(a => 
                a.AssetName.ToLower().Contains(search) ||
                a.SerialNumber.ToLower().Contains(search) ||
                (a.MakeModel != null && a.MakeModel.ToLower().Contains(search))
            ).ToList();
        }

        // Apply type filter
        if (!string.IsNullOrWhiteSpace(filterType))
        {
            assets = assets.Where(a => a.AssetType == filterType).ToList();
        }

        // Apply status filter
        if (!string.IsNullOrWhiteSpace(filterStatus))
        {
            assets = assets.Where(a => a.Status == filterStatus).ToList();
        }
    }

    private async Task HandleSearch()
    {
        ApplyFilters();
        await Task.CompletedTask;
    }

    private async Task HandleFilterChange()
    {
        ApplyFilters();
        await Task.CompletedTask;
    }

    private async Task ClearFilters()
    {
        searchTerm = null;
        filterType = null;
        filterStatus = null;
        ApplyFilters();
        await Task.CompletedTask;
    }

    private void NavigateToAdd()
    {
        Navigation.NavigateTo("/assets/add");
    }

    private void NavigateToEdit(int assetId)
    {
        Navigation.NavigateTo($"/assets/edit/{assetId}");
    }

    private void ShowDeleteConfirmation(Asset asset)
    {
        assetToDelete = asset;
        showDeleteModal = true;
        
        if (asset.Status == "Assigned")
        {
            deleteWarning = "This asset is currently assigned. It cannot be deleted.";
        }
        else
        {
            deleteWarning = null;
        }
    }

    private void CancelDelete()
    {
        showDeleteModal = false;
        assetToDelete = null;
        deleteWarning = null;
    }

    private async Task ConfirmDelete()
{
    if (assetToDelete == null) return;

    isDeleting = true;

    try
    {
        await AssetService.DeleteAssetAsync(assetToDelete.AssetId);
        ToastService.ShowSuccess($"✓ Asset '{assetToDelete.AssetName}' deleted successfully!");
        showDeleteModal = false;
        assetToDelete = null;
        await LoadAssets();
    }
    catch (CannotDeleteException ex)
    {
        ToastService.ShowError($"✗ {ex.Message}");
        showDeleteModal = false;
    }
    catch (Exception ex)
    {
        ToastService.ShowError("Failed to delete asset");
        showDeleteModal = false;
    }
    finally
    {
        isDeleting = false;
    }
}
}