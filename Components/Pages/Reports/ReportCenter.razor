@page "/reports"
@inject IReportService ReportService
@inject ToastService ToastService
@inject IJSRuntime JS
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>Reports</PageTitle>

<div class="container-fluid mt-4">
    <div class="row mb-3">
        <div class="col-md-12">
            <h3>Report Center</h3>
            <p class="text-muted">Generate and export reports</p>
        </div>
    </div>

    <!-- Export Reports -->
    <div class="row mb-4">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-primary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-download"></i> Export Reports to CSV
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-4 mb-3">
                            <div class="card h-100 text-center">
                                <div class="card-body">
                                    <i class="bi bi-box-seam text-primary" style="font-size: 3rem;"></i>
                                    <h5 class="mt-3">Assets Report</h5>
                                    <p class="text-muted">Export all assets with details</p>
                                    <button class="btn btn-primary" @onclick="ExportAssets" disabled="@isExporting">
                                        @if (isExporting && exportType == "assets")
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        <i class="bi bi-download"></i> Export Assets
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4 mb-3">
                            <div class="card h-100 text-center">
                                <div class="card-body">
                                    <i class="bi bi-people text-success" style="font-size: 3rem;"></i>
                                    <h5 class="mt-3">Employees Report</h5>
                                    <p class="text-muted">Export all employees with details</p>
                                    <button class="btn btn-success" @onclick="ExportEmployees" disabled="@isExporting">
                                        @if (isExporting && exportType == "employees")
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        <i class="bi bi-download"></i> Export Employees
                                    </button>
                                </div>
                            </div>
                        </div>

                        <div class="col-md-4 mb-3">
                            <div class="card h-100 text-center">
                                <div class="card-body">
                                    <i class="bi bi-arrow-left-right text-info" style="font-size: 3rem;"></i>
                                    <h5 class="mt-3">Assignments Report</h5>
                                    <p class="text-muted">Export assignment history</p>
                                    <button class="btn btn-info" @onclick="ExportAssignments" disabled="@isExporting">
                                        @if (isExporting && exportType == "assignments")
                                        {
                                            <span class="spinner-border spinner-border-sm me-2"></span>
                                        }
                                        <i class="bi bi-download"></i> Export Assignments
                                    </button>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- Assignment History Report -->
    <div class="row">
        <div class="col-md-12">
            <div class="card">
                <div class="card-header bg-secondary text-white">
                    <h5 class="mb-0">
                        <i class="bi bi-clock-history"></i> Assignment History Report
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row mb-3">
                        <div class="col-md-4">
                            <label class="form-label">Start Date</label>
                            <input type="date" class="form-control" @bind="startDate" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">End Date</label>
                            <input type="date" class="form-control" @bind="endDate" />
                        </div>
                        <div class="col-md-4">
                            <label class="form-label">&nbsp;</label>
                            <div>
                                <button class="btn btn-primary me-2" @onclick="LoadHistory">
                                    <i class="bi bi-search"></i> Generate Report
                                </button>
                                <button class="btn btn-outline-secondary" @onclick="ClearFilters">
                                    <i class="bi bi-x-circle"></i> Clear
                                </button>
                            </div>
                        </div>
                    </div>

                    @if (historyAssignments != null)
                    {
                        @if (historyAssignments.Any())
                        {
                            <div class="table-responsive">
                                <table class="table table-striped table-hover">
                                    <thead class="table-dark">
                                        <tr>
                                            <th>Asset</th>
                                            <th>Employee</th>
                                            <th>Department</th>
                                            <th>Assigned</th>
                                            <th>Returned</th>
                                            <th>Duration</th>
                                            <th>Status</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        @foreach (var assignment in historyAssignments)
                                        {
                                            var endDate = assignment.ReturnedDate ?? DateTime.Now;
                                            var duration = (endDate - assignment.AssignedDate).Days;
                                            
                                            <tr>
                                                <td>
                                                    <strong>@assignment.Asset.AssetName</strong>
                                                    <br />
                                                    <small class="text-muted">@assignment.Asset.SerialNumber</small>
                                                </td>
                                                <td>@assignment.Employee.FullName</td>
                                                <td>@assignment.Employee.Department</td>
                                                <td>@assignment.AssignedDate.ToString("MMM dd, yyyy")</td>
                                                <td>
                                                    @if (assignment.ReturnedDate.HasValue)
                                                    {
                                                        @assignment.ReturnedDate.Value.ToString("MMM dd, yyyy")
                                                    }
                                                    else
                                                    {
                                                        <span class="text-muted">-</span>
                                                    }
                                                </td>
                                                <td>@duration days</td>
                                                <td>
                                                    @if (assignment.ReturnedDate.HasValue)
                                                    {
                                                        <span class="badge bg-secondary">Returned</span>
                                                    }
                                                    else
                                                    {
                                                        <span class="badge bg-success">Active</span>
                                                    }
                                                </td>
                                            </tr>
                                        }
                                    </tbody>
                                </table>
                            </div>
                            <p class="text-muted">Total Records: @historyAssignments.Count</p>
                        }
                        else
                        {
                            <div class="alert alert-info">
                                <i class="bi bi-info-circle"></i> No assignment records found for the selected date range.
                            </div>
                        }
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    private bool isExporting = false;
    private string? exportType;
    private DateTime? startDate;
    private DateTime? endDate;
    private List<AssetAssignment>? historyAssignments;

    private async Task ExportAssets()
    {
        isExporting = true;
        exportType = "assets";

        try
        {
            var csvData = await ReportService.ExportAssetsToCSVAsync();
            await DownloadFile(csvData, $"Assets_Export_{DateTime.Now:yyyyMMdd_HHmmss}.csv");
            ToastService.ShowSuccess("✓ Assets report exported successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
            ToastService.ShowError("Failed to export assets report");
        }
        finally
        {
            isExporting = false;
            exportType = null;
        }
    }

    private async Task ExportEmployees()
    {
        isExporting = true;
        exportType = "employees";

        try
        {
            var csvData = await ReportService.ExportEmployeesToCSVAsync();
            await DownloadFile(csvData, $"Employees_Export_{DateTime.Now:yyyyMMdd_HHmmss}.csv");
            ToastService.ShowSuccess("✓ Employees report exported successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
            ToastService.ShowError("Failed to export employees report");
        }
        finally
        {
            isExporting = false;
            exportType = null;
        }
    }

    private async Task ExportAssignments()
    {
        isExporting = true;
        exportType = "assignments";

        try
        {
            var csvData = await ReportService.ExportAssignmentsToCSVAsync();
            await DownloadFile(csvData, $"Assignments_Export_{DateTime.Now:yyyyMMdd_HHmmss}.csv");
            ToastService.ShowSuccess("✓ Assignments report exported successfully!");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Export error: {ex.Message}");
            ToastService.ShowError("Failed to export assignments report");
        }
        finally
        {
            isExporting = false;
            exportType = null;
        }
    }

    private async Task DownloadFile(byte[] fileData, string fileName)
    {
        try
        {
            var base64 = Convert.ToBase64String(fileData);
            await JS.InvokeVoidAsync("downloadFile", fileName, base64);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Download error: {ex.Message}");
            ToastService.ShowError("Failed to download file");
        }
    }

    private async Task LoadHistory()
    {
        try
        {
            historyAssignments = await ReportService.GetAssignmentHistoryAsync(startDate, endDate);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Load history error: {ex.Message}");
            ToastService.ShowError("Failed to load assignment history");
        }
    }

    private void ClearFilters()
    {
        startDate = null;
        endDate = null;
        historyAssignments = null;
    }
}