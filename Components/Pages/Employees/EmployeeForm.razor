@page "/employees/add"
@page "/employees/edit/{Id:int}"
@using AssetManagementApp.Services
@inject IEmployeeService EmployeeService
@inject NavigationManager Navigation
@inject ToastService ToastService
@rendermode @(new InteractiveServerRenderMode())

<PageTitle>@(Id == 0 ? "Add" : "Edit") Employee</PageTitle>

<div class="container mt-4">
    <div class="row">
        <div class="col-md-8 offset-md-2">
            <div class="card shadow">
                <div class="card-header bg-primary text-white">
                    <h4 class="mb-0">
                        <i class="bi @(Id == 0 ? "bi-person-plus" : "bi-pencil")"></i>
                        @(Id == 0 ? "Add New Employee" : "Edit Employee")
                    </h4>
                </div>
                <div class="card-body">
                    
                    @if (isLoading)
                    {
                        <div class="text-center py-5">
                            <div class="spinner-border text-primary" style="width: 3rem; height: 3rem;"></div>
                            <p class="mt-3 text-muted">Loading employee data...</p>
                        </div>
                    }
                    else if (employee != null)
                    {
                        <EditForm Model="employee" OnValidSubmit="HandleSubmit" FormName="EmployeeForm">
                            <DataAnnotationsValidator />
                            
                            <!-- Full Name -->
                            <div class="mb-3">
                                <label for="fullName" class="form-label fw-bold">
                                    Full Name <span class="text-danger">*</span>
                                </label>
                                <InputText id="fullName" 
                                          class="form-control" 
                                          @bind-Value="employee.FullName" 
                                          placeholder="Enter full name" />
                                <ValidationMessage For="@(() => employee.FullName)" class="text-danger small" />
                            </div>

                            <!-- Department -->
                            <div class="mb-3">
                                <label for="department" class="form-label fw-bold">
                                    Department <span class="text-danger">*</span>
                                </label>
                                <InputText id="department" 
                                          class="form-control" 
                                          @bind-Value="employee.Department" 
                                          placeholder="e.g., IT, HR, Finance"
                                          list="departmentList" />
                                <datalist id="departmentList">
                                    <option value="IT"></option>
                                    <option value="HR"></option>
                                    <option value="Finance"></option>
                                    <option value="Marketing"></option>
                                    <option value="Sales"></option>
                                </datalist>
                                <ValidationMessage For="@(() => employee.Department)" class="text-danger small" />
                            </div>

                            <!-- Email -->
                            <div class="mb-3">
                                <label for="email" class="form-label fw-bold">
                                    Email Address <span class="text-danger">*</span>
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-envelope"></i>
                                    </span>
                                    <InputText id="email" 
                                              type="email" 
                                              class="form-control" 
                                              @bind-Value="employee.Email" 
                                              placeholder="employee@company.com" />
                                </div>
                                <ValidationMessage For="@(() => employee.Email)" class="text-danger small" />
                                <small class="form-text text-muted">Must be unique</small>
                            </div>

                            <!-- Phone Number -->
                            <div class="mb-3">
                                <label for="phone" class="form-label fw-bold">
                                    Phone Number
                                </label>
                                <div class="input-group">
                                    <span class="input-group-text">
                                        <i class="bi bi-telephone"></i>
                                    </span>
                                    <InputText id="phone" 
                                              class="form-control" 
                                              @bind-Value="employee.PhoneNumber" 
                                              placeholder="1234567890 or 123-456-7890" />
                                </div>
                                <ValidationMessage For="@(() => employee.PhoneNumber)" class="text-danger small" />
                                <small class="form-text text-muted">Format: 1234567890 or 123-456-7890</small>
                            </div>

                            <!-- Designation -->
                            <div class="mb-3">
                                <label for="designation" class="form-label fw-bold">
                                    Designation <span class="text-danger">*</span>
                                </label>
                                <InputText id="designation" 
                                          class="form-control" 
                                          @bind-Value="employee.Designation" 
                                          placeholder="e.g., Software Engineer" 
                                          list="designationList" />
                                <datalist id="designationList">
                                    <option value="Software Engineer"></option>
                                    <option value="Senior Developer"></option>
                                    <option value="Manager"></option>
                                    <option value="Team Lead"></option>
                                </datalist>
                                <ValidationMessage For="@(() => employee.Designation)" class="text-danger small" />
                            </div>

                            <!-- Is Active -->
                            <div class="mb-4">
                                <div class="form-check form-switch">
                                    <InputCheckbox id="isActive" 
                                                  class="form-check-input" 
                                                  @bind-Value="employee.IsActive" />
                                    <label class="form-check-label fw-bold" for="isActive">
                                        Active Employee
                                    </label>
                                </div>
                                <small class="form-text text-muted">
                                    <i class="bi bi-info-circle"></i> 
                                    Inactive employees cannot receive new asset assignments
                                </small>
                            </div>

                            <!-- Buttons -->
                            <div class="d-grid gap-2 d-md-flex justify-content-md-end">
                                <button type="button" class="btn btn-outline-secondary" @onclick="Cancel" disabled="@isSaving">
                                    <i class="bi bi-x-circle"></i> Cancel
                                </button>
                                <button type="submit" class="btn btn-success px-4" disabled="@isSaving">
                                    @if (isSaving)
                                    {
                                        <span class="spinner-border spinner-border-sm me-2"></span>
                                        <span>Saving...</span>
                                    }
                                    else
                                    {
                                        <i class="bi bi-save"></i>
                                        <span> Save Employee</span>
                                    }
                                </button>
                            </div>
                        </EditForm>
                    }
                </div>
            </div>
        </div>
    </div>
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Employee? employee;
    private bool isLoading = false;
    private bool isSaving = false;

    protected override async Task OnInitializedAsync()
    {
        isLoading = true;

        try
        {
            if (Id > 0)
            {
                employee = await EmployeeService.GetEmployeeByIdAsync(Id);
                if (employee == null)
                {
                    ToastService.ShowError("Employee not found");
                    employee = new Employee();
                }
            }
            else
            {
                employee = new Employee { IsActive = true };
            }
        }
        catch (Exception ex)
        {
            ToastService.ShowError($"Error loading employee: {ex.Message}");
            employee = new Employee();
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task HandleSubmit()
    {
        if (employee == null) return;

        isSaving = true;

        try
        {
            if (Id == 0)
            {
                await EmployeeService.AddEmployeeAsync(employee);
                ToastService.ShowSuccess($"✓ Employee '{employee.FullName}' added successfully!");
            }
            else
            {
                employee.EmployeeId = Id;
                await EmployeeService.UpdateEmployeeAsync(employee);
                ToastService.ShowSuccess($"✓ Employee '{employee.FullName}' updated successfully!");
            }

            Navigation.NavigateTo("/employees");
        }
        catch (InvalidOperationException ex)
        {
            ToastService.ShowError(ex.Message);
        }
        catch (Exception ex)
        {
            ToastService.ShowError("Failed to save employee. Please try again.");
        }
        finally
        {
            isSaving = false;
        }
    }

    private void Cancel()
    {
        Navigation.NavigateTo("/employees");
    }
}